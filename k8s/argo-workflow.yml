apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: argo-kurbernets-fullstack-demo-
spec:
  entrypoint: main
  templates:
    - name: main
      dag:
        tasks:
          - name: clone
            template: clone-repo
          - name: test
            dependencies: [clone]
            template: run-tests
            arguments:
              artifacts:
                - name: src
                  from: "{{tasks.clone.outputs.artifacts.src}}"
          - name: process-images
            dependencies: [clone]
            template: process-images
            arguments:
              artifacts:
                - name: src
                  from: "{{tasks.clone.outputs.artifacts.src}}"
          - name: build-and-push
            dependencies: [test, process-images]
            template: build-and-push
            arguments:
              artifacts:
                - name: src
                  from: "{{tasks.clone.outputs.artifacts.src}}"
                - name: processed-images
                  from: "{{tasks.process-images.outputs.artifacts.processed-images}}"
              parameters:
                - name: commit
                  value: "{{tasks.clone.outputs.parameters.commit}}"
          - name: deploy
            dependencies: [build-and-push]
            template: deploy-app
            arguments:
              artifacts:
                - name: src
                  from: "{{tasks.clone.outputs.artifacts.src}}"
              parameters:
                - name: commit
                  value: "{{tasks.clone.outputs.parameters.commit}}"

    - name: clone-repo
      container:
        image: alpine/git
        command: ["sh", "-c"]
        args:
          [
            "git clone https://github.com/Niklas-Mezynski/fh-aachen-argo-kurbernets-fullstack-demo.git /src && cd /src && git rev-parse HEAD > /tmp/commit",
          ]
      outputs:
        artifacts:
          - name: src
            path: /src
        parameters:
          - name: commit
            valueFrom:
              path: /tmp/commit

    - name: run-tests
      inputs:
        artifacts:
          - name: src
            path: /src
      container:
        image: node:22-alpine
        command: ["sh", "-c"]
        args: ["cd /src && npm install && npm run test"]

    - name: build-and-push
      inputs:
        artifacts:
          - name: src
            path: /src
          - name: processed-images
            path: /processed-images
        parameters:
          - name: commit
      container:
        image: gcr.io/kaniko-project/executor:latest
        command: ["/kaniko/executor"]
        args:
          - "--dockerfile=/src/Dockerfile"
          - "--context=/src"
          - "--destination=ghcr.io/niklas-mezynski/argo-kurbernets-fullstack-demo:latest"
          - "--destination=ghcr.io/niklas-mezynski/argo-kurbernets-fullstack-demo:{{inputs.parameters.commit}}"
          - "--build-arg=PROCESSED_IMAGES_PATH=/processed-images"
        env:
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /secret/credentials.json
        volumeMounts:
          - name: registry-secret
            mountPath: /kaniko/.docker/
      volumes:
        - name: registry-secret
          secret:
            secretName: ghcr-secret
            items:
              - key: .dockerconfigjson
                path: config.json

    - name: deploy-app
      inputs:
        artifacts:
          - name: src
            path: /src
        parameters:
          - name: commit
      container:
        image: bitnami/kubectl:latest
        command: ["sh", "-c"]
        args:
          - |
            # Set the image tag environment variable
            export IMAGE_TAG={{inputs.parameters.commit}}
            kubectl apply -n argo --server-side --validate=false -f /src/k8s/deployment.yml
        env:
          - name: IMAGE_TAG
            value: "{{inputs.parameters.commit}}"

    - name: process-images
      inputs:
        artifacts:
          - name: src
            path: /src
      outputs:
        artifacts:
          - name: processed-images
            path: /processed-images
      container:
        image: dpokidov/imagemagick:7.1.1-47-bullseye
        command: ["sh", "-c"]
        args:
          - |
            mkdir -p /processed-images
            echo "Starting image processing..."

            # Process each image in the public directory
            for img in /src/public/*.{png,jpg,jpeg,PNG,JPG,JPEG}; do
              if [ -f "$img" ]; then
                filename=$(basename "$img")
                name_without_ext="${filename%.*}"
                echo "Converting $filename to WebP..."
                magick "$img" -quality 85 "/processed-images/${name_without_ext}.webp"
                echo "Converted $filename -> ${name_without_ext}.webp"
              fi
            done

            # Also copy any existing webp files
            for webp in /src/public/*.{webp,WEBP}; do
              if [ -f "$webp" ]; then
                cp "$webp" /processed-images/
                echo "Copied existing WebP: $(basename "$webp")"
              fi
            done

            echo "Image processing complete!"
            ls -la /processed-images/
            ls -la /processed-images/
